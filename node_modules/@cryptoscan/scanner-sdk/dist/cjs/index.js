"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.listenTransactions = exports.getPrice = exports.getRate = exports.getRates = void 0;
const ws_1 = __importDefault(require("ws"));
const getRates = async ({ network, to, from, amount }) => {
    const params = new URLSearchParams();
    params.set('network', network);
    params.set('to', to);
    if (from) {
        params.set('from', from);
    }
    if (amount && (Number.isNaN(amount) || !Number.isFinite(amount))) {
        throw new Error('Amount must be a number');
    }
    if (amount) {
        params.set('amount', String(amount));
    }
    const res = await fetch('https://api.cryptoscan.pro/v1/rate?' + params.toString());
    return res.json();
};
exports.getRates = getRates;
const getRate = (params) => (0, exports.getRates)(params).then(r => Array.isArray(r) ? r[0] : r);
exports.getRate = getRate;
const getPrice = (params) => (0, exports.getRate)(params).then(r => r?.price);
exports.getPrice = getPrice;
const listenTransactions = (params, onTransaction) => {
    const ws = new ws_1.default('wss://api.cryptoscan.pro/v1/transactions');
    ws.on('open', () => {
        ws.send(JSON.stringify(params));
    });
    ws.on('message', (msg) => {
        const data = JSON.parse(msg.toString());
        onTransaction({
            ...data,
            createdAt: new Date(data.createdDate),
        });
    });
    return () => {
        ws.close();
    };
};
exports.listenTransactions = listenTransactions;
__exportStar(require("./types/index.js"), exports);
