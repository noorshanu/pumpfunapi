"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.swap = void 0;
const web3_js_1 = require("@solana/web3.js");
const createTransaction_js_1 = require("./createTransaction.js");
const solana_send_transaction_1 = __importDefault(require("@cryptoscan/solana-send-transaction"));
const swap = async ({ wallet, connection: paramsConnection, ...params }) => {
    switch (params.network) {
        case 'solana': {
            const walletAddress = wallet.publicKey.toString();
            const newParams = {
                ...params,
                walletAddress,
                isLegacy: false,
            };
            const transaction = await (0, createTransaction_js_1.createTransaction)(newParams);
            const connection = paramsConnection || new web3_js_1.Connection(process.env.CONNECTION_URL, {
                wsEndpoint: process.env.WS_CONNECTION_URL,
            });
            transaction.sign([wallet]);
            console.log(transaction.message.instructions);
            const txid = await (0, solana_send_transaction_1.default)(transaction.serialize(), {
                connection,
                checkBlockHeight: false,
                speed: 'fast',
            });
            return txid;
        }
        default:
            throw new Error(`${params.network} network is not implemented yet. Please ask to support this network: https://t.me/daniil_jave`);
    }
};
exports.swap = swap;
